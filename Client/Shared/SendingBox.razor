@inject IJSRuntime JSRuntime

<div class="sending-box" @attributes="AdditionalAttributes" @onkeyup="OnKeyUp" @onkeyup:preventDefault="@(!CanSubmmit)">
    <fluent-text-field class="sending-box__input" placeholder="message" @ref="_input" @bind-value="Message" @bind-value:event="oninput"></fluent-text-field>
    <fluent-button class="sending-box__button" title="Send" appearance="accent" disabled="@(!CanSubmmit)" @onclick="SubmitAsync">Send</fluent-button>
</div>

@code {

    [Parameter]
    public EventCallback<string> OnSubmitted { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    protected ElementReference _input;

    protected string Message { get; set; }

    protected async Task SubmitAsync()
    {
        if (CanSubmmit)
        {
            await OnSubmitted.InvokeAsync(Message);
        }
    }

    protected bool CanSubmmit => !string.IsNullOrWhiteSpace(Message);

    public async void Clear()
    {
        if (CanSubmmit)
        {
            Message = string.Empty;
            await JSRuntime.InvokeVoidAsync("ClearInput",_input);
        }
    }

    private async void OnKeyUp(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            await SubmitAsync();
        }
    }
}
