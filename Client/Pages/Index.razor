@using ChatRoom.Client.Models
@using Microsoft.AspNetCore.SignalR.Client;

@implements IDisposable

@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ChatRoom.Client.Services.IAvatarGenerator Avatar

<div class="chatroom">

    <div class="chatroom__messages-box" @ref="_messagesBox">
        <span class="chatroom__online-users">@(_onlineUsers) Online</span>
        @for (int i = 0; i < _messages.Count; i++)
        {
            var preTime = default(DateTime);
            var preIndex = i - 1;
            if (preIndex >= 0)
            {
                preTime = _messages[preIndex].Time;
            }
            var message = _messages[i];

            <MessageBox class="message-box chatroom__message-box" Avatar="@message.Avatar" Nickname="@message.Nickname" Content="@message.Content" Time="@message.Time" PreTime="preTime" IsOwned="@message.IsOwned" Type="@message.Type"></MessageBox>
        }
    </div>

    <SendingBox @ref="_sendingBox" class="chatroom__sending-box sending-box" OnSubmitted="OnSubmittedAsync"></SendingBox>
</div>

@code {
    private readonly IList<Message> _messages = new List<Message>();
    private HubConnection _hubConnection;
    private SendingBox _sendingBox;
    private ElementReference _messagesBox;
    private int _onlineUsers;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, DateTime, string, string>("MessageReceived", async (message, time, nickname, id) =>
         {
             _messages.Add(new Message
             {
                 Avatar = Avatar.Generate(id),
                 Nickname = nickname,
                 Content = message,
                 Time = time,
                 IsOwned = _hubConnection.ConnectionId == id
             });

             StateHasChanged();

             await JSRuntime.InvokeVoidAsync("ScrollBottom", _messagesBox);

         });

        _hubConnection.On<int, string>("OnlineUserJoined", (onlineUsers, nickname) =>
         {
             _onlineUsers = onlineUsers;
             _messages.Add(new Message
             {
                 Nickname = nickname,
                 Type = MessageType.Joined,
                 Time = DateTime.Now
             });

             StateHasChanged();
         });

        _hubConnection.On<int, string>("OnlineUserLeaved", (onlineUsers, nickname) =>
        {
            _onlineUsers = onlineUsers;
            _messages.Add(new Message
            {
                Nickname = nickname,
                Type = MessageType.Leaved,
                Time = DateTime.Now
            });

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task OnSubmittedAsync(string message)
    {
        await _hubConnection.InvokeAsync("SendMessageAsync", message, DateTime.Now);
        _sendingBox.Clear();
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}