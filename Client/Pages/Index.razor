@using ChatRoom.Client.Models
@using Microsoft.AspNetCore.SignalR.Client;

@implements IDisposable

@page "/"
@inject NavigationManager NavigationManager

<div class="chatroom">
    <div class="chatroom__messages-box">

        @for (int i = 0; i < _messages.Count; i++)
        {
            var preTime = default(DateTime);
            var preIndex = i - 1;
            if (preIndex >= 0)
            {
                preTime = _messages[preIndex].Time;
            }
            var message = _messages[i];

            <MessageBox Content="@message.Content" Time="@message.Time" PreTime="preTime"></MessageBox>
        }
    </div>
    <SendingBox class="chatroom__sending-box sending-box" OnSubmitted="OnSubmittedAsync"></SendingBox>
</div>

@code{
    private readonly IList<Message> _messages = new List<Message>();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, DateTime>("ReceiveMessage", (message, time) =>
          {
              _messages.Add(new Message
              {
                  Content = message,
                  Time = time
              });
              StateHasChanged();
          });

        await _hubConnection.StartAsync();
    }

    private async Task OnSubmittedAsync(string message)
    {
        await _hubConnection.InvokeAsync("SendMessageAsync", message, DateTime.Now);
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}